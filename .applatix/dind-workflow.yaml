---
type: container
name: docker-image-build-container
description: build docker image

inputs:
  parameters:
    code:
    docker_username:
      default: "%%secrets.==$1$key=default$text$ARfqu3F1jR6Tlxks0UUK5WBYovKgGw9U2MMyHCINvsqr8hZMGseSNq5UKItipkzjRLlgO2I201PO+evEVW/gKCo79cfhsIQRBZxyP5Ef0JyOGTQ4zIdE1Nd3oNX97OlGUwN+nFz0esVtd4Ollwk6sW52v99i1z1AlY5/9aVLExJOvJYWEhGO9cqYLOs2PPpLb3oKATgE5oIxSk0uRHtXl1+JfbD3IPnuTZjHahncBlUOVg83Lfvqi1MuDM1FnNIK65Axz35AeO+w2Iog5zy9cJLpcqL1tmMW6SywRWMNzjuK0FVwugGToMyLQHrAcSE1DTzq0nM2oumKg8lI0Va7cFVDep15l74f9EVhcpqK3O86JmA3A96PWANEO0eSHjtkeGOcn1vqbKq5CNwHpSd+mYxNYo2Y4NbTbocoDj0JmMBmEw====%%"
    docker_password:
      default: "%%secrets.==$1$key=default$text$ASP948HDQEOQhw5VD5ym1J94Utl2ung4jY1zm56ar+aGrq+HyTfY1DDksJjRvB+ayeQKgfUnBzUNJN073YbO/WHgqjIKhFCeI3KSnlfJxWMYs4afYajfmOBvgaj2apXn1qrXXQyNqFMGxfLO9/jJRm6qADrzazX9FyOysqPo0WkgI2Q2aOdDnYCh67JAzazaSzK4yRvqMRMyIa9ueDZlhELpog3QB99fdJse7eoRBf4vp9UbCXduDWwCNFDdwICkFuxGRD0Uzds0rycfgPLEJwbBogYR0ghennchDrcBrJd6YsgP+xcFfW9lx+s7QhNsTSFyevriNZp3A3HIlutlzzEW9kdnxQnS8T3ei0+evyXR2Nrazp2M2fE/Nk24fPcu/XBGTe5bjM4X0QnUFqCJgAk/WN6a74BO0sTo/QMatekipA====%%"
  artifacts:
  - from: "%%code%%"
    path: "/src"

container:
  # Build a docker image and push it
  # The docker:1.12 image already has the docker command installed
  image: docker:1.12
  command: "cd /src &&
              docker login -u %%docker_username%% -p %%docker_password%% &&
              docker build -f Dockerfile -t nanotkarashish/todo . &&
              docker push nanotkarashish/todo"
labels:
    # Enable docker access in this container by specifying the size of graph storage needed and the amount of cpu and memory required for docker commands
    "ax_ea_docker_enable": '{ "graph-storage-name": "sampledockerapp", "graph-storage-size": "10Gi", "cpu_cores":"0.5", "mem_mib":"800"}'

---
type: container
name: sampleapp-image-container
description: Run a sample app (node based web server.)
inputs:
  parameters:
    version:
container:
  image: "nanotkarashish/todo"

---
type: deployment
name: docker-image-deployment
inputs:
  parameters:
    appname:
      default: "sampleapp"
    domain:
      default: " skynet3.applatix.net"
    version:
      default: "v1"

application:
  name: "%%appname%%"
deployment:
  name: "node"
external_routes:
  - name: "%%appname%%"
    target_port: 80
    ip_white_list:
      - 0.0.0.0/0
internal_routes:
  - name: "%%appname%%"
    target_port: 8080
    port: 8080
scale:
  min: 4
containers:
  - sampleapp:
      template: sampleapp-image-container

---
type: workflow
name: docker-image-build
inputs:
  parameters:
    commit:
      default: "%%session.commit%%"
    repo:
      default: "%%session.repo%%"
    version:
      default: "v1"

steps:
  - checkout:
      template: axscm-checkout
  - build:
      template: docker-image-build-container
      parameters:
        code: "%%steps.checkout.code%%"

---
type: workflow
name: docker-image-deploy
inputs:
  parameters:
    version:
      default: "v1"

steps:
  - deploy:
      template: docker-image-deployment

---
type: workflow
name: docker-image-build-approve-deploy
inputs:
  parameters:
    commit:
      default: "%%session.commit%%"
    repo:
      default: "%%session.repo%%"
    version:
      default: "v1"
    required_approvals:
      default: " "
    optional_approvals:
      default: " "
    number_of_optional_approvals_needed:
      default: 0
    timeout_in_minutes:
      default: 10 
 
steps:
  - checkout:
      template: axscm-checkout
  - build:
      template: docker-image-build-container
      parameters:
        code: "%%steps.checkout.code%%"
  - approval:
      template: axapproval
  - deploy:
      template: docker-image-deployment
